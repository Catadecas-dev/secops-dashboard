// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT_USER
  CLIENT_ADMIN
  ANALYST
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  role         Role      @default(CLIENT_USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLoginAt  DateTime?

  accounts         Account[]
  sessions         Session[]
  createdIncidents Incident[]        @relation("IncidentCreator")
  comments         IncidentComment[]
  auditLogs        AuditLog[]

  @@index([email])
}

model Incident {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  severity    Severity
  status      Status   @default(OPEN)
  source      String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User              @relation("IncidentCreator", fields: [createdById], references: [id])
  comments  IncidentComment[]
  auditLogs AuditLog[]

  @@index([status])
  @@index([severity])
  @@index([createdAt])
}

model IncidentComment {
  id         String   @id @default(cuid())
  incidentId String
  authorId   String
  body       String   @db.Text
  createdAt  DateTime @default(now())

  incident  Incident   @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  author    User       @relation(fields: [authorId], references: [id])
  auditLogs AuditLog[]

  @@index([incidentId])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String // LOGIN, CREATE_INCIDENT, UPDATE_INCIDENT, CREATE_COMMENT, etc.
  resource  String? // incident, comment, etc.
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user            User?            @relation(fields: [userId], references: [id])
  incident        Incident?        @relation(fields: [resourceId], references: [id], map: "AuditLog_incident_fkey")
  incidentComment IncidentComment? @relation(fields: [resourceId], references: [id], map: "AuditLog_incidentComment_fkey")

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([resource, resourceId])
}
